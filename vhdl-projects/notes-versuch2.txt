##############
### XILINX IDE:
##############

1) starten Xilinx ISE Design Suite
~/Xilinx/14.7/ISE_DS/ISE/bin/lin64/ise

2) File=> new project, then following settings:

Project:
    Project Name: xilinxproject-versuch1
    Project Path: home/XXXXXXXXXXXXXXXXXX
    Working Directory: home/XXXXXXXXXXXXX
    Description:
    Top Level Source Type: HDL

Device:
    Device Family: Spartan6
    Device:        xc6slx16
    Package:       csg324
    Speed:         -3

    Top-Level Source Type: HDL
    Synthesis Tool: XST (VHDL/Verilog)
    Simulator: ISim (VHDL/Verilog)
    Preferred Language: VHDL
    Property Specification in Project File: Store all values
    Manual Compile Order: false
    VHDL Source Analysis Standard: VHDL-93

    Message Filtering: disabled

3) oben links, rechte mousetaste/new source/VHDL Module/



##############
### ALLGEMEINE TIPPS:
##############

* VHDL unterscheidet nicht gross oder klein buchst.
* kommentare mit -- (wie sql/haskell)
* namen und bezeichner müssen mit [a-Z] anfangen, danach _ oder [a-Z] oder [0-9]
* vollständige VHDL anweisungen mit ";" beenden.
* die Entity beschreibt nur die schnitstelle, nicht die implementierung
* "library" 1mal pro datei, aber "use" 1MAL PRO ENTITY
* zuweisung von bit   y<='0';   zuweisung von bitstring:  y<="0101";  sequentielle zuweisung: y<= '0' after 0ns, '1' after 5ns;


##############
### SKRIPT VERSUCH 2
##############

### ZIELE:
1) Datenflussbeschreibung: minimierung+implementierung log. fn
2) Strukturbeschreibung: Grafische komposition eines schaltelements aus mehreren einfacheren
3) Algor. beschreibung: erstellen komplx. schaltelemente mit höherer Prog.sprache ("Verhaltensbeschreibung")


### WIEDERHOLUNG:

#Entwurf komplexer Systeme: top-down oder bottom-up.
monolitisch geht auch, aber die aufgabe kann dann nicht verteilt wdn, und wird unübersichtlich.
AUCH*******************
    1) Verbindung von großen bausteinen, die algor. beschrieben sind (IP-Cores) als VHDL beschreibung verkauft
    2) bei regulären strukturen (wie speichern) ist auch sinvoll (dazu gibs in xilinx "schemata")
    3) manchmal algorithmische konstrukte reichen nicht, und muss man sie tweaken

Vernetzen von kleineren, bekannten in größeren komponenten wird mit der Strukturbeschreibung getan. Da sind die weiteren Architekturen offen.
Bei algor. beschreibung wird das verhalten wie eine imperative sprache formuliert
bei datenfluss beschreibung, funktionelle angehensweise: fn_b = fn_a(fn_ c...)

### SIGNALE: die träger von information. Zuweisen, abfragen, aber OPTIMIERUNG kann sie ändern
             signale haben typen. std_logic, std_logic_vector aus IEEE.std_logic_1164
             Library IEEE;
             use IEEE.std_logic_1164.all;
             9-wertige signale, wobei 0, 1, U (nicht init), X (unbekannt) wichtig sind
             sie haben auch in/out/inout modus: Signal a_test : in std_logic;

### 4-WERTIGE LOGIK:

#inverter:
   U X 0 1
  ________
   U X 1 0

#AND:
 1) wenn es eine null gibt, ergebnis ist null
 2) wenn beide inputs gleich, output=input
 3) 1 und etwas = etwas
 4) U und X = U (nicht init und unbekannt = nicht init)


   U X 0 1
  ________
U| U
X| U X
0| 0 0 0
1| U X 0 1


#OR:
 1) wenn es eine 1 gibt, ergebnis ist 1
 2) wenn beide inputs gleich, output=input
 3) 0 oder etwas = etwas
 4) U oder X = U (nicht init oder unbekannt = nicht init)
   U X 0 1
  ________
U| U U U 1
X| U X X 1
0| U X 0 1
1| 1 1 1 1

WICHTIG: BEIDE MATRITZEN SIND SYMMETRISCH
         X vs U => U WINS ALWAYS



# BUSSE:
testbus_1 : in std_logic_vector(0 to 7) -- oder (7 to 0)
testbus_2 <= "0000001" -- das könnte eine 1 oder eine 128 sein
-- partielle Zuweisungen
testbus_3 (0 to 3) <= "0101"
testbus_3 (5) <= '1'

# Archs:
Library IEEE;
use IEEE.std_logic_1164.all;

entity And_gate is
  port (
    in0, in1 : in std_logic;
    out0 : out std_logic
    );
end And_gate;

architecture dataflow of And_gate is
begin
  out0 <= in0 and in1;
end dataflow;


  # struktur:
architecture structure of NAND_gate is

  component and_gate
    port(
      in0...
    );
  end component;
  component inverter
    port(
      in0...
    );
  end component;

signal and_out0, inverter_out0 : std_logic;
begin
  and2 : and_gate port map (a, b, and_out0);
  inverter1 : inverter port map (and_out0, inverter1_out0)
  c <= inverter1_out0
end structure;



##############
### GRAFISCHE BEDIENUNG
##############

1) GENERATE-ANWEISUNGEN (VHDL: durch param. schleifen werden komponente autom. instanziiert).
2) SCHEMATA: technische schaltsymbole die Entities entsprechen. Grafisch editieren, VHDL auto. generieren







##############
### LAUFZEITEFFEKTE
##############
Bislang utopisch. 2 modellierungen der Verzögerung:
  1) idealle verzögerung um die Zeitspanne "t": jede signaländerung kommt raus nach "t" zeit
  2) träge Verzögerung um die Zeitspanne "t": signaländerungen mit spanne "s"<"t" werden verschluckt. Nur signaländerungen mit "s">="t" werden ideal verzögert.
Beides ist in VHDL entsprochen durch sprachkonstrukte:

### AND MIT TRÄGERVERZÖGERUNG:
architekture dataflow of and_gate is:
begin
 c <= a and b after 10 ns;
end dataflow;

### FÜR IDEALE VERZÖGERUNG:
c <= transport a and b after 10 ns;








##############
### VERSUCH 2 VORBEREITUNGSAUFGABEN:
##############


1) Weshalb wird die Sensitivitätsliste eines Prozesses benötigt?
Die Prozesse werden aufgerufen genau dann, wenn ein Signal in der SListe sich ändert.
Dies optimiert die frequenz, mit der solche aufgerufen werden sollen.

2) Geben Sie die Wahrheitstabelle der Implikationsfunktion an und die dazu gehörige boo-
lesche Gleichung als minimale DNF (disjunktive Normalform).

a  b   a->b == (not a) or b
0  0    1
0  1    1
1  0    0
1  1    1

3)Informieren Sie sich über Multiplexer. Wie viele Ausgänge kann ein Multiplexer haben?
Bei n Steuereingängen hat ein Multiplexer wie viele Dateneingänge?
Beschalten Sie einen 2:1 Multiplexer ohne Verwendung weiterer Gatter um die Implika-
tionsfunktion zu realisieren.

ein mult. hat 1 ausgang. mit n steuereingänge hat er 2^n dateneingänge


1  b
|  |           _______
X--+-------d0--| 2:1 |_____ Y = a -> b
|  +-------d1--| MUX |
|  |           **T****
|  |             |
|  |             |
|  |             |
|  |             a


4) In VHDL ist es möglich, eine Schaltung durch ihre Komponenten und deren Vernetzung
untereinander zu beschreiben. Konstruieren Sie ein AND-Gatter mit fünf Eingängen aus
maximal vier AND-Gattern mit zwei Eingängen

in1 ---
        and --
in2 ---       \
               \___and_____
in3 ---        /       ____and ----> Y = in1 and in2 and in3 and in4 and in5
        and --/       /
in4 ---              / 
                    /
in5 ---------------/
 

5) Gehen Sie davon aus das es 10 Nanosekunden dauert bis ein gegebenes AND-Gatter (mit
zwei Eingängen) bei einem Signalwechsel das neue Ergebnis berechnet und an seinem
Ausgang anzeigt. Die Zeit für den Signaltransport zwischen zwei Gattern, also vom
Ausgang des ersten Gatters zum Eingang des zweiten Gatters, wird nicht berücksichtigt.
Geben Sie für jeden Eingang der Schaltung aus Aufgabe 4 die Zeit an, die benötigt
wird, bis ein Wechsel des jeweiligen Eingangs auch einen Wechsel am Ausgang der
Gesamtschaltung bewirkt.


in1 -(0)_
         and (10)--
in2 -(0)/           \____
                    ___and (20)____
in3 -(0)_           /       ____(0)_and ----> Y = in1 and in2 and in3 and in4 and in5
         and (10)--/       /
in4 -(0)/                / 
                        /
in5 -------------------/




6) Bestimmen Sie mit Hilfe zweier KV-Diagramme die minimale DNF für die Ausgänge
c out und s des Halbaddierers. Übertragen Sie zunächst die Wertetabellen für die Summe
und den Übertrag in zwei KV-Diagramme. Führen Sie eine graphische Minimierung
durch und ermitteln Sie die minimalen DNFs für die Summe und den Übertrag


HALBADDIERER: [c,s]
     b0    b1
a0  [0,0]  [0,1]
a1  [0,1]  [1,0]

GETRENNTE KV DIAGRAMMS:
C (a and b)   S (a xor b) is (~ab or a~b)

    b
    _
  0 0           0 1
a|0 1           1 0

DNFs:
C = ab
S = ~ab or a~b





7) Im Folgenden soll ein 1-Bit-Volladdierer entworfen werden. Er bildet die Summe aus zwei
Eingangsbits und dem Carry-out der vorherigen Stufe. Außerdem liefert er ein Carry-out
für die nachfolgende Stufe. Beschreiben Sie sein Verhalten durch eine Wahrheitstabelle.
Erstellen Sie die KV-Diagramme für die Summe s und für c out. Bestimmen Sie die
daraus resultierenden minimalen DNFs.

WAHRHEITSTABELLE

A  B  Cin |  Cout  S
0  0  0   |  0     0
0  0  1   |  0     1
0  1  0   |  0     1
0  1  1   |  1     0
1  0  0   |  0     1
1  0  1   |  1     0
1  1  0   |  1     0
1  1  1   |  1     1

KV-DIAGRAMM

      __c__
   __b__
a| 10 11 10 01
   01 10 01 00

DIAGRAMM FÜR Cout
   1  1  1  0
   0  1  0  0
DIAGRAMM FÜR S
   0  1  0  1
   1  0  1  0

DNFs:
Cout = ab || ac || bc
S    = ~ab~c || abc || ~a~bc || a~b~c



8) Überlegen Sie sich wie ein Addierer für zwei n-Bit Vektoren aus mehreren Voll- und
Halbaddierern aufgebaut werden kann.

A = (a_n, ...., a_0)
B = (b_n, ...., b_0)

A+B:

  ...____a2___a1____a0
...___b2_+__b1_+__b0|
      |  |  |  |  | /
      |  |  | /   HA
      | /   VA___/
      VA____/
und so weiter



##############
### VERSUCH 2 PROGRAMMIERAUFGABEN:
##############
1) neue datei -> schematic
2) bei jeder Komponente, VHDL Datei oben links auswählen und unter "Design" tab, doppelclick auf "Create Schematic Symbol".
3) unter Symbols tab, mein Projekt unter "Categories" wählen, und da sollten die "Symbols" erscheinen



   U X 0 1
  ________
U| U   0 U
X|   X 0 X
0| 0 0 0 0
1| U X 0 1

